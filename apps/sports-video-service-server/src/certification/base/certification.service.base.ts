/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Certification as PrismaCertification,
  Coach as PrismaCoach,
} from "@prisma/client";

export class CertificationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CertificationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.certification.count(args);
  }

  async certifications(
    args: Prisma.CertificationFindManyArgs
  ): Promise<PrismaCertification[]> {
    return this.prisma.certification.findMany(args);
  }
  async certification(
    args: Prisma.CertificationFindUniqueArgs
  ): Promise<PrismaCertification | null> {
    return this.prisma.certification.findUnique(args);
  }
  async createCertification(
    args: Prisma.CertificationCreateArgs
  ): Promise<PrismaCertification> {
    return this.prisma.certification.create(args);
  }
  async updateCertification(
    args: Prisma.CertificationUpdateArgs
  ): Promise<PrismaCertification> {
    return this.prisma.certification.update(args);
  }
  async deleteCertification(
    args: Prisma.CertificationDeleteArgs
  ): Promise<PrismaCertification> {
    return this.prisma.certification.delete(args);
  }

  async getCoach(parentId: string): Promise<PrismaCoach | null> {
    return this.prisma.certification
      .findUnique({
        where: { id: parentId },
      })
      .coach();
  }
}
