/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request, Response } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { FileInterceptor } from "@nestjs/platform-express";
import { CoachService } from "../coach.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { CoachCreateInput } from "./CoachCreateInput";
import { Coach } from "./Coach";
import { CoachFindManyArgs } from "./CoachFindManyArgs";
import { CoachWhereUniqueInput } from "./CoachWhereUniqueInput";
import { CoachUpdateInput } from "./CoachUpdateInput";
import { CertificationFindManyArgs } from "../../certification/base/CertificationFindManyArgs";
import { Certification } from "../../certification/base/Certification";
import { CertificationWhereUniqueInput } from "../../certification/base/CertificationWhereUniqueInput";
import { VideoFindManyArgs } from "../../video/base/VideoFindManyArgs";
import { Video } from "../../video/base/Video";
import { VideoWhereUniqueInput } from "../../video/base/VideoWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class CoachControllerBase {
  constructor(
    protected readonly service: CoachService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Coach })
  @nestAccessControl.UseRoles({
    resource: "Coach",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createCoach(@common.Body() data: CoachCreateInput): Promise<Coach> {
    return await this.service.createCoach({
      data: data,
      select: {
        bio: true,
        createdAt: true,
        id: true,
        name: true,
        profilePicture: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Coach] })
  @ApiNestedQuery(CoachFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Coach",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async coaches(@common.Req() request: Request): Promise<Coach[]> {
    const args = plainToClass(CoachFindManyArgs, request.query);
    return this.service.coaches({
      ...args,
      select: {
        bio: true,
        createdAt: true,
        id: true,
        name: true,
        profilePicture: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Coach })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Coach",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async coach(
    @common.Param() params: CoachWhereUniqueInput
  ): Promise<Coach | null> {
    const result = await this.service.coach({
      where: params,
      select: {
        bio: true,
        createdAt: true,
        id: true,
        name: true,
        profilePicture: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Coach })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Coach",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateCoach(
    @common.Param() params: CoachWhereUniqueInput,
    @common.Body() data: CoachUpdateInput
  ): Promise<Coach | null> {
    try {
      return await this.service.updateCoach({
        where: params,
        data: data,
        select: {
          bio: true,
          createdAt: true,
          id: true,
          name: true,
          profilePicture: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Coach })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Coach",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteCoach(
    @common.Param() params: CoachWhereUniqueInput
  ): Promise<Coach | null> {
    try {
      return await this.service.deleteCoach({
        where: params,
        select: {
          bio: true,
          createdAt: true,
          id: true,
          name: true,
          profilePicture: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Put(":id/profilePicture")
  @common.UseInterceptors(FileInterceptor("file"))
  @swagger.ApiConsumes("multipart/form-data")
  @swagger.ApiBody({
    schema: {
      type: "object",

      properties: {
        file: {
          type: "string",
          format: "binary",
        },
      },
    },
  })
  @swagger.ApiParam({
    name: "id",
    type: "string",
    required: true,
  })
  @swagger.ApiCreatedResponse({
    type: Coach,
    status: "2XX",
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  async uploadProfilePicture(
    @common.Param()
    params: CoachWhereUniqueInput,
    @common.UploadedFile()
    file: Express.Multer.File
  ): Promise<Coach> {
    return this.service.uploadProfilePicture(
      {
        where: params,
      },
      Object.assign(file, {
        filename: file.originalname,
      })
    );
  }

  @common.Get(":id/profilePicture")
  @swagger.ApiParam({
    name: "id",
    type: "string",
    required: true,
  })
  @swagger.ApiOkResponse({
    type: common.StreamableFile,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  async downloadProfilePicture(
    @common.Param()
    params: CoachWhereUniqueInput,
    @common.Res({
      passthrough: true,
    })
    res: Response
  ): Promise<common.StreamableFile> {
    const result = await this.service.downloadProfilePicture({
      where: params,
    });

    if (result === null) {
      throw new errors.NotFoundException(
        "No resource was found for ",
        JSON.stringify(params)
      );
    }

    res.setHeader(
      "Content-Disposition",
      `attachment; filename=${result.filename}`
    );
    res.setHeader("Content-Type", result.mimetype);
    return result.stream;
  }

  @common.Delete(":id/profilePicture")
  @swagger.ApiOkResponse({
    type: Coach,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  async deleteProfilePicture(
    @common.Param()
    params: CoachWhereUniqueInput
  ): Promise<Coach> {
    return this.service.deleteProfilePicture({
      where: params,
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/certifications")
  @ApiNestedQuery(CertificationFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Certification",
    action: "read",
    possession: "any",
  })
  async findCertifications(
    @common.Req() request: Request,
    @common.Param() params: CoachWhereUniqueInput
  ): Promise<Certification[]> {
    const query = plainToClass(CertificationFindManyArgs, request.query);
    const results = await this.service.findCertifications(params.id, {
      ...query,
      select: {
        coach: {
          select: {
            id: true,
          },
        },

        course: true,
        createdAt: true,
        description: true,
        id: true,
        title: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/certifications")
  @nestAccessControl.UseRoles({
    resource: "Coach",
    action: "update",
    possession: "any",
  })
  async connectCertifications(
    @common.Param() params: CoachWhereUniqueInput,
    @common.Body() body: CertificationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      certifications: {
        connect: body,
      },
    };
    await this.service.updateCoach({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/certifications")
  @nestAccessControl.UseRoles({
    resource: "Coach",
    action: "update",
    possession: "any",
  })
  async updateCertifications(
    @common.Param() params: CoachWhereUniqueInput,
    @common.Body() body: CertificationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      certifications: {
        set: body,
      },
    };
    await this.service.updateCoach({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/certifications")
  @nestAccessControl.UseRoles({
    resource: "Coach",
    action: "update",
    possession: "any",
  })
  async disconnectCertifications(
    @common.Param() params: CoachWhereUniqueInput,
    @common.Body() body: CertificationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      certifications: {
        disconnect: body,
      },
    };
    await this.service.updateCoach({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/videos")
  @ApiNestedQuery(VideoFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Video",
    action: "read",
    possession: "any",
  })
  async findVideos(
    @common.Req() request: Request,
    @common.Param() params: CoachWhereUniqueInput
  ): Promise<Video[]> {
    const query = plainToClass(VideoFindManyArgs, request.query);
    const results = await this.service.findVideos(params.id, {
      ...query,
      select: {
        category: true,

        coach: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        description: true,
        encodingStatus: true,
        id: true,
        outputUrls: true,
        price: true,
        thumbnailUrls: true,
        title: true,
        updatedAt: true,
        url: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/videos")
  @nestAccessControl.UseRoles({
    resource: "Coach",
    action: "update",
    possession: "any",
  })
  async connectVideos(
    @common.Param() params: CoachWhereUniqueInput,
    @common.Body() body: VideoWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      videos: {
        connect: body,
      },
    };
    await this.service.updateCoach({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/videos")
  @nestAccessControl.UseRoles({
    resource: "Coach",
    action: "update",
    possession: "any",
  })
  async updateVideos(
    @common.Param() params: CoachWhereUniqueInput,
    @common.Body() body: VideoWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      videos: {
        set: body,
      },
    };
    await this.service.updateCoach({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/videos")
  @nestAccessControl.UseRoles({
    resource: "Coach",
    action: "update",
    possession: "any",
  })
  async disconnectVideos(
    @common.Param() params: CoachWhereUniqueInput,
    @common.Body() body: VideoWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      videos: {
        disconnect: body,
      },
    };
    await this.service.updateCoach({
      where: params,
      data,
      select: { id: true },
    });
  }
}
