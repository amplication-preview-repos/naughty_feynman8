/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Coach as PrismaCoach,
  Certification as PrismaCertification,
  Video as PrismaVideo,
} from "@prisma/client";

export class CoachServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.CoachCountArgs, "select">): Promise<number> {
    return this.prisma.coach.count(args);
  }

  async coaches(args: Prisma.CoachFindManyArgs): Promise<PrismaCoach[]> {
    return this.prisma.coach.findMany(args);
  }
  async coach(args: Prisma.CoachFindUniqueArgs): Promise<PrismaCoach | null> {
    return this.prisma.coach.findUnique(args);
  }
  async createCoach(args: Prisma.CoachCreateArgs): Promise<PrismaCoach> {
    return this.prisma.coach.create(args);
  }
  async updateCoach(args: Prisma.CoachUpdateArgs): Promise<PrismaCoach> {
    return this.prisma.coach.update(args);
  }
  async deleteCoach(args: Prisma.CoachDeleteArgs): Promise<PrismaCoach> {
    return this.prisma.coach.delete(args);
  }

  async findCertifications(
    parentId: string,
    args: Prisma.CertificationFindManyArgs
  ): Promise<PrismaCertification[]> {
    return this.prisma.coach
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .certifications(args);
  }

  async findVideos(
    parentId: string,
    args: Prisma.VideoFindManyArgs
  ): Promise<PrismaVideo[]> {
    return this.prisma.coach
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .videos(args);
  }
}
